{"version":3,"file":"static/js/665.dd03ce57.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/PhoneBook/PhoneBook.jsx","pages/PhoneBook/PhoneBook.styled.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { getContacts } from 'redux/selectors';\nimport { Form, Label } from './ContactForm.styled';\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        return setName(e.target.value);\n      case 'number':\n        return setNumber(e.target.value);\n      default:\n        return;\n    }\n  };\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  const hendleSubmit = e => {\n    e.preventDefault();\n    contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())\n      ? alert(`${name} is already in contacts`)\n      : dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  return (\n    <Form onSubmit={hendleSubmit}>\n      <Label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </Label>\n      <Label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </Label>\n      <button type=\"submit\">Add contact</button>\n    </Form>\n  );\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const onDelete = id => dispatch(deleteContact(id));\n  return (\n    <>\n      <p>\n        {name}: {number}\n      </p>\n      <button\n        onClick={() => {\n          onDelete(id);\n        }}\n      >\n        Delete\n      </button>\n    </>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\nexport const Markup = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 16px;\n  margin: 8px;\n`;\nexport const Contact = styled.li`\n  display: flex;\n  gap: 8px;\n`;\n","import React from 'react';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilterValue } from 'redux/selectors';\nimport { Contact, Markup } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilterValue);\n\n  const visibleContacts = contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  return (\n    <Markup>\n      {visibleContacts.map(({ id, name, number }) => (\n        <Contact key={id}>\n          <ContactItem id={id} name={name} number={number} />\n        </Contact>\n      ))}\n    </Markup>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilterValue } from 'redux/filter/filterSlice';\nimport { getFilterValue } from 'redux/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilterValue);\n\n  const onChange = e => dispatch(setFilterValue(e.target.value));\n\n  return (\n    <div>\n      <label>\n        Find contacts by name\n        <input type=\"text\" value={filter} onChange={onChange} />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { selectError, selectIsLoading } from 'redux/selectors';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nimport { Container } from './PhoneBook.styled';\n\nexport default function PhoneBook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <p>Loading...</p>}\n      <ContactList />\n    </Container>\n  );\n}\n","import styled from 'styled-components';\nexport const Container = styled.div`\n  align-items: center;\n  width: 320px;\n  margin: 10px auto;\n  text-align: center;\n`;\n"],"names":["Form","styled","Label","ContactForm","onSubmit","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","getContacts","handleChange","e","target","value","preventDefault","find","contact","toLowerCase","alert","addContact","type","pattern","title","required","onChange","id","onClick","deleteContact","onDelete","Markup","Contact","ContactList","filter","getFilterValue","visibleContacts","includes","map","setFilterValue","PhoneBook","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","Container"],"sourceRoot":""}